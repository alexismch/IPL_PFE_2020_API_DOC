openapi: 3.0.0
info:
  description: Documentation for the BlockCovid API
  version: 1.2
  title: BlockCovid API
tags:
  - name: public
    description: Accessible for everyone
  - name: doctors
    description: Require a token with type "doctor"
  - name: institutions
    description: Require a token with type "institution"
  - name: citizens
    description: Require a token with type "citizen"
paths:
  /authenticate:
    post:
      tags:
        - public
      summary: Retrieve a new access token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Connectable"
        description: This route should be use by doctors and institutions to retrieve a token needed for accessing restricted route
        required: true
      responses:
        "200":
          description: Token returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenObject"
        "401":
          description: email or password invalid
        "422":
          $ref: "#/components/responses/UnprocessableEntityError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /doctors:
    post:
      tags:
        - public
      summary: Create a new doctor
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Doctor"
        description: The doctor to create
        required: true
      responses:
        "201":
          description: Created & session returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenObject"
        "409":
          description: Email or INAMI already used
        "422":
          $ref: "#/components/responses/UnprocessableEntityError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /doctors/me:
    get:
      tags:
        - doctors
      summary: Get private details for the current authenticated doctor
      responses:
        "200":
          description: Doctor private details returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorPrivateReturned"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/doctors/{id}":
    get:
      tags:
        - doctors
        - institutions
        - citizens
      summary: Get doctor details
      parameters:
        - in: path
          name: id
          description: Doctor id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: Doctor details returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorReturned"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: The requested doctor does not exist or has been deleted
        default:
          $ref: "#/components/responses/UnexpectedError"
  /institutions:
    post:
      tags:
        - public
      summary: Create a new institution
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Institution"
        description: The institution to create.
        required: true
      responses:
        "201":
          description: Created & session returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenObject"
        "409":
          description: Email or institution number already used
        "422":
          $ref: "#/components/responses/UnprocessableEntityError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /institutions/me:
    get:
      tags:
        - institutions
      summary: Get private details for the current authenticated institution
      responses:
        "200":
          description: Institution private details returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstitutionPrivateReturned"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /citizens:
    post:
      tags:
        - public
      summary: Create a new citizen or return the citizen that matches with the device
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Citizen"
        description: The citizen to create
      responses:
        "201":
          description: Created & session returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CitizenReturned"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /locations:
    get:
      tags:
        - institutions
        - doctors
      summary: Get locations of the institution or doctor
      security:
        - BearerTokenAuth: []
      responses:
        "200":
          description: Locations returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LocationReturned"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      tags:
        - institutions
        - doctors
      summary: Create a location for the institution or doctor
      security:
        - BearerTokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
        description: The location to create
        required: true
      responses:
        "201":
          description: Location created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationReturned"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          description: location's name already used for this institution or doctor
        "422":
          $ref: "#/components/responses/UnprocessableEntityError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/locations/{id}":
    get:
      tags:
        - doctors
        - institutions
        - citizens
      summary: Get location details
      parameters:
        - in: path
          name: id
          description: Location id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: Location details returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationReturned"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: The requested location does not exist or has been deleted
        default:
          $ref: "#/components/responses/UnexpectedError"
  /history:
    get:
      tags:
        - citizens
      summary: Get history for the current authenticated user
      security:
        - BearerTokenAuth: []
      responses:
        "200":
          description: Successfully returned
          content:
            application/json:
              schema:
                type: array
                description: List of history entries
                items:
                  $ref: "#/components/schemas/HistoryEntryReturned"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      tags:
        - citizens
      summary: Add a new entry in QR Code scans history
      security:
        - BearerTokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HistoryEntry"
        description: An new history entry
        required: true
      responses:
        "201":
          description: A new entry has been created in the history of the citizen
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HistoryEntryReturned"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: The id does not correspond to an existing doctor nor a institution
        "422":
          $ref: "#/components/responses/UnprocessableEntityError"
        default:
          $ref: "#/components/responses/UnexpectedError"
servers:
  - url: "https://ipl-pfe-2020-dev.herokuapp.com/api"
components:
  schemas:
    Citizen:
      type: object
      properties:
        device:
          type: string
          example: android-4d3eafebdfea34b7
    CitizenReturned:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        device:
          type: string
          example: android-4d3eafebdfea34b7
      required:
        - id
    Connectable:
      type: object
      properties:
        email:
          type: string
          example: mail@mail.com
        password:
          type: string
          example: password
      required:
        - email
        - password
    Date:
      type: string
      description: Date formatted as \"YYYY-MM-DDTHH:mm:ssZ\"
      example: "2020-12-06T00:34:42Z"
    Doctor:
      type: object
      properties:
        firstName:
          type: string
          example: Jean
        lastName:
          type: string
          example: Toubib
        email:
          type: string
          example: jean.toubib@doctor.com
        password:
          type: string
          example: JeanToubibPasswd
        inami:
          type: string
          example: JeanToubibInami
      required:
        - firstName
        - lastName
        - email
        - password
        - inami
    DoctorHistoryEntryReturned:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        type:
          type: string
          enum:
            - doctor
        scanDate:
          $ref: "#/components/schemas/Date"
        firstName:
          type: string
          example: Paul
        lastName:
          type: string
          example: Dupond
      required:
        - id
        - type
        - scanDate
        - firstName
        - lastName
    DoctorPrivateReturned:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        firstName:
          type: string
          example: Jean
        lastName:
          type: string
          example: Toubib
        email:
          type: string
          example: jean.toubib@doctor.com
        inami:
          type: string
          example: JeanToubibInami
      required:
        - id
        - firstName
        - lastName
        - email
        - inami
    DoctorReturned:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        firstName:
          type: string
          example: Jean
        lastName:
          type: string
          example: Dupond
      required:
        - id
        - firstName
        - lastName
    HistoryEntry:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        type:
          type: string
          enum:
            - doctor
            - institution
        scanDate:
          $ref: "#/components/schemas/Date"
      required:
        - type
        - id
        - scanDate
    HistoryEntryReturned:
      oneOf:
        - $ref: "#/components/schemas/DoctorHistoryEntryReturned"
        - $ref: "#/components/schemas/LocationHistoryEntryReturned"
    Id:
      type: string
      example: "5fc8cb2d1915c8079861c223"
    Institution:
      type: object
      properties:
        name:
          type: string
          example: MyInstitute
        email:
          type: string
          example: contact@my-institure.com
        password:
          type: string
          example: MyInstitutePasswd
        "no":
          type: string
          format: '^(\s*?\.*?-*?)(\d\s*\.*-*){10}$'
          example: 0544.944.416
      required:
        - name
        - email
        - password
        - "no"
    InstitutionPrivateReturned:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          example: MyInstitute
        email:
          type: string
          example: contact@my-institure.com
        "no":
          type: string
          format: '^(\s*?\.*?-*?)(\d\s*\.*-*){10}$'
          example: 0544.944.416
      required:
        - id
        - name
        - email
        - "no"
    Location:
      type: object
      properties:
        name:
          type: string
          example: Restaurant
        description:
          type: string
          example: My Institute's restaurant
      required:
        - name
        - description
    LocationHistoryEntryReturned:
      type: object
      properties:
        type:
          type: string
          enum:
            - institution
        id:
          $ref: "#/components/schemas/Id"
        scanDate:
          $ref: "#/components/schemas/Date"
        name:
          type: string
          example: Bosphorus
        description:
          type: string
          example: Snack Bosphorus, one of the best snack in Brussels
        ownerName:
          type: string
          example: Bospho's brothers
      required:
        - type
        - id
        - scanDate
        - name
        - description
        - ownerName
    LocationReturned:
      type: object
      properties:
        name:
          type: string
          example: Restaurant
        description:
          type: string
          example: My Institute's restaurant
        id:
          $ref: "#/components/schemas/Id"
        owner_id:
          type: string
          example: 5fc903486bd22215a045e45d
        owner_name:
          type: string
          example: My Institute
      required:
        - name
        - description
        - id
        - owner_id
        - owner_name
    TokenObject:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiZG9jdG9ycyIsImlkIjoiNWZjOGU0NDg5OTU2ODEwMDE1NWIxNWUyIiwiaWF0IjoxNjA3MDAxMTYwLCJleHAiOjE2MDcwODe1NjB9.6Jr818rxRtSb7KwB18KCcRknQO_bULHv3q2molEyhvc
        type:
          type: string
          enum:
            - doctor
            - institution
            - citizen
      required:
        - token
        - type

  securitySchemes:
    BearerTokenAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Bearer authentication. The client must send this token in the Authorization header when making requests to protected resources.\n<br/>\n<br/>Authorization: Bearer &#x3C;token&#x3E;"

  responses:
    BadRequestError:
      description: The request syntax is incorrect
    UnauthorizedError:
      description: Access token is missing or invalid
    UnprocessableEntityError:
      description: One of the required field is missing or incorrect
    UnexpectedError:
      description: Unexpected Error
